@using TenVids.Utilities

@model WatchVideoVM
<style>
    video {
        width: 100%;
        border-radius: 12px;
        outline: none;
    }

    .video-actions {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-top: 12px;
        padding-bottom: 16px;
        border-bottom: 1px solid #e5e5e5;
    }

    .video-title {
        font-size: 1.4rem;
        font-weight: 500;
        margin: 12px 0;
    }

    .video-stats {
        display: flex;
        align-items: center;
        color: #606060;
        font-size: 0.9rem;
    }

    .action-buttons {
        display: flex;
        gap: 8px;
    }

    .like-dislike-container {
        display: flex;
        align-items: center;
        background: #f9f9f9;
        border-radius: 18px;
        overflow: hidden;
        height: 36px;
    }

    .like-section, .dislike-section {
        display: flex;
        align-items: center;
        padding: 0 12px;
        height: 100%;
        cursor: pointer;
        color: #606060;
    }

    .like-section {
        border-right: 1px solid #e5e5e5;
    }

        .like-section.active {
            background: rgba(6, 95, 212, 0.1);
            color: #065fd4;
        }

    .dislike-section.active {
        background: rgba(6, 95, 212, 0.1);
        color: #065fd4;
    }

    .like-section i, .dislike-section i {
        margin-right: 6px;
        font-size: 1.1rem;
    }

    .action-button {
        display: flex;
        align-items: center;
        padding: 0 12px;
        background: #f9f9f9;
        border-radius: 18px;
        cursor: pointer;
        height: 36px;
        color: #606060;
        font-size: 0.9rem;
        font-weight: 500;
    }

        .action-button:hover {
            background: #f0f0f0;
        }

        .action-button i {
            margin-right: 6px;
            font-size: 1.1rem;
        }

    .channel-info {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-top: 12px;
    }

    .channel-text {
        display: flex;
        flex-direction: column;
    }

    .channel-name {
        font-weight: 500;
        color: #030303;
    }

    .subscriber-count {
        color: #606060;
        font-size: 0.8rem;
    }

    .subscribe-btn {
        transition: all 0.3s ease;
        min-width: 100px; 
    }

    .btn-danger {
        background-color: #dc3545; 
    }

    .btn-success {
        background-color: #28a745; 
    }
</style>

<a asp-action="Index" asp-controller="Home" class="btn btn-primary btn-lg">Back</a>

<div class="row mt-3">
    <div class="col-lg-9 mb-2">
        <video controls>
            <source src="/Video/GetVideoFile?videoId=@Model.Id" type="" />
            Your browser does not support the video tag.
        </video>

        <h1 class="video-title">@Model.Title</h1>

        <div class="video-actions">
            <div class="video-stats">
                <span id="view-count">@Model.ViewsCount.ToString("N0") views</span>
                <span style="margin: 0 4px;">•</span>
                <span>@SD.TimeAgo(Model.CreatedAt)</span>
            </div>

            <div class="action-buttons">
                <div class="like-dislike-container">
                    <div class="like-section @(Model.IsLiked ? "active" : "")" id="likeBtn" onclick="likeDislike('likeBtn', 'like')">
                        <i class="bi bi-hand-thumbs-up-fill"></i>
                        <span>@SD.FormatView(Model.LikesCount)</span>
                    </div>
                    <div class="dislike-section @(Model.IsDisliked ? "active" : "")" id="dislikeBtn" onclick="likeDislike('dislikeBtn', 'dislike')">
                        <i class="bi bi-hand-thumbs-down-fill"></i>
                        <span>@SD.FormatView(Model.DislikesCount)</span>
                    </div>
                </div>

                <button class="action-button">
                    <i class="bi bi-share"></i>
                    <span>Share</span>
                </button>

                <button class="action-button">
                    <i class="bi bi-clipboard-plus"></i>
                    <span>Save</span>
                </button>

                <form method="post">
                    <button asp-action="DownloadVideo" asp-route-videoId="@Model.Id" type="submit" class="action-button">
                        <i class="bi bi-download"></i>
                        <span>Download</span>
                    </button>
                </form>
            </div>
        </div>

        <div class="channel-info">
            <div class="channel-text">
            <a asp-action="Channel" asp-controller="Member" class="text-danger text-decoration-none">@Model.ChannelName</a>
                <span class="subscriber-count">@SD.FormatView(Model.SubscribersCount) subscribers</span>
            </div>

            <button id="subscribeBtn" class="btn @(Model.IsSubscribed ? "btn-success" : "btn-danger")">
                @(Model.IsSubscribed ? "Subscribed ✓" : "Subscribe")
            </button>
           
        </div>

        <div class="video-description mt-3">
            <p>@Model.Description</p>
        </div>
    </div>

    <div class="col-lg-3">
        <!-- Suggested videos or other sidebar content can go here -->
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            $('#subscribeBtn').on('click', function (e) {
                e.preventDefault();
                var btn = $(this);

                $.ajax({
                    url: "/Video/SubscribeChannel",
                    type: "PUT",
                    data: { channelId: '@Model.ChannelId' },
                    success: function (data) {
                        if (data.title === "Unsubscribed") {
                            btn.removeClass('btn-success');
                            btn.addClass('btn-danger');
                            btn.text('Subscribe');
                            toastr.success(data.message);
                        } else if (data.title === "Subscribed") {
                            btn.removeClass('btn-danger');
                            btn.addClass('btn-success');
                            btn.text('Subscribed ✓');
                            toastr.success(data.message);
                        } else {
                            toastr.error(data.message);
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error("Subscription error:", error);
                        toastr.error("Failed to update subscription");
                    }
                });
            });
        });
        function likeDislike(id, action) {
            const button = $(`#${id}`);
            const isActive = button.hasClass('active');

            $.ajax({
                url: "/Video/LikeVideo",
                type: "PUT",
                data: {
                    videoId: '@Model.Id',
                    action: action,
                    like: !isActive // true when activating, false when deactivating
                },
                success: function (data) {
                    if (data.success) {
                        const countSpan = button.find('span:last');
                        let currentCount = parseInt(countSpan.text().replace(/[^0-9]/g, '')) || 0;

                        // Toggle active class
                        button.toggleClass('active');

                        // Update count based on new state
                        if (button.hasClass('active')) {
                            countSpan.text(currentCount + 1);
                        } else {
                            countSpan.text(currentCount - 1);
                        }

                        // Handle mutual exclusion
                        if (action === 'like') {
                            $('#dislikeBtn').removeClass('active');
                        } else {
                            $('#likeBtn').removeClass('active');
                        }

                        toastr.success(data.message);
                    } else {
                        toastr.error(data.message);
                    }
                },
                error: function (xhr, status, error) {
                    console.error("Like/Dislike error:", error);
                    toastr.error("Failed to update reaction");
                }
            });
        }
    </script>
}